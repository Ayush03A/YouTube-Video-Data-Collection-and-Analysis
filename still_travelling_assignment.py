# -*- coding: utf-8 -*-
"""Still Travelling Assignment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15z1O7WpzoQ-yXvSIt8dOXqg176pKkY2p
"""

import googleapiclient.discovery
import pandas as pd
import os

# API key
API_KEY = "AIzaSyCxrOv_lbkPxWIMU8mbqDfplf39Wvn9jZs"
API_SERVICE_NAME = "youtube"
API_VERSION = "v3"

# Function to get videos for a specific genre
def get_videos(genre, max_results=500):
    youtube = googleapiclient.discovery.build(API_SERVICE_NAME, API_VERSION, developerKey=API_KEY)
    video_list = []

    search_response = youtube.search().list(
        q=genre,
        type="video",
        part="id,snippet",
        maxResults=50
    ).execute()

    video_list += search_response['items']


    while len(video_list) < max_results and "nextPageToken" in search_response:
        search_response = youtube.search().list(
            q=genre,
            type="video",
            part="id,snippet",
            maxResults=50,
            pageToken=search_response["nextPageToken"]
        ).execute()
        video_list += search_response['items']

    return video_list[:max_results]

# Function to get video details
def get_video_details(video_ids):
    youtube = googleapiclient.discovery.build(API_SERVICE_NAME, API_VERSION, developerKey=API_KEY)
    video_data = []

    for i in range(0, len(video_ids), 50):
        response = youtube.videos().list(
            id=",".join(video_ids[i:i+50]),
            part="snippet,statistics,contentDetails,recordingDetails"
        ).execute()

        for item in response['items']:
            video_data.append({
                "Video URL": f"https://www.youtube.com/watch?v={item['id']}",
                "Title": item["snippet"].get("title"),
                "Description": item["snippet"].get("description"),
                "Channel Title": item["snippet"].get("channelTitle"),
                "Keyword Tags": item["snippet"].get("tags", []),
                "YouTube Video Category": item["snippet"].get("categoryId"),
                "Topic Details": None,  # API does not provide topics directly
                "Video Published at": item["snippet"].get("publishedAt"),
                "Video Duration": item["contentDetails"].get("duration"),
                "View Count": item["statistics"].get("viewCount"),
                "Comment Count": item["statistics"].get("commentCount"),
                "Captions Available": "true" if item["contentDetails"].get("caption") == "true" else "false",
                "Location of Recording": item.get("recordingDetails", {}).get("location", None),
            })

    return video_data

# Main function
def main():
    genre = input("Enter the genre to search: ")
    videos = get_videos(genre)
    video_ids = [video["id"]["videoId"] for video in videos]

    print("Fetching video details...")
    video_data = get_video_details(video_ids)

    # Save to CSV
    df = pd.DataFrame(video_data)
    csv_filename = f"{genre.replace(' ', '_')}_videos.csv"
    df.to_csv(csv_filename, index=False, encoding="utf-8")
    print(f"Data saved to {csv_filename}")

if __name__ == "__main__":
    main()

